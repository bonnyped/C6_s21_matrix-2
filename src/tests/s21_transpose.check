#suite s21_transpose

#test s21_transpose_1
  matrix_t A;
  matrix_t result;
  s21_create_matrix(3, 3, &A);

  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;

  A.matrix[1][0] = 0.0;
  A.matrix[1][1] = 4.0;
  A.matrix[1][2] = 2.0;

  A.matrix[2][0] = 5.0;
  A.matrix[2][1] = 2.0;
  A.matrix[2][2] = 1.0;

  ck_assert_int_eq(s21_transpose(&A, &result), 0);

  ck_assert_double_eq_tol(result.matrix[0][0], 1.0, S21_EPSILON);
  ck_assert_double_eq_tol(result.matrix[0][1], 0.0, S21_EPSILON);
  ck_assert_double_eq_tol(result.matrix[0][2], 5.0, S21_EPSILON);

  ck_assert_double_eq_tol(result.matrix[1][0], 2.0, S21_EPSILON);
  ck_assert_double_eq_tol(result.matrix[1][1], 4.0, S21_EPSILON);
  ck_assert_double_eq_tol(result.matrix[1][2], 2.0, S21_EPSILON);

  ck_assert_double_eq_tol(result.matrix[2][0], 3.0, S21_EPSILON);
  ck_assert_double_eq_tol(result.matrix[2][1], 2.0, S21_EPSILON);
  ck_assert_double_eq_tol(result.matrix[2][2], 1.0, S21_EPSILON);

  s21_remove_matrix(&A);
  s21_remove_matrix(&result);

#test s21_transpose_2
  matrix_t A;
  matrix_t result;
  s21_create_matrix(3, 2, &A);

  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;

  A.matrix[1][0] = 0.0;
  A.matrix[1][1] = 4.0;

  A.matrix[2][0] = 5.0;
  A.matrix[2][1] = 2.0;

  ck_assert_int_eq(s21_transpose(&A, &result), 0);

  ck_assert_double_eq_tol(result.matrix[0][0], 1.0, S21_EPSILON);
  ck_assert_double_eq_tol(result.matrix[0][1], 0.0, S21_EPSILON);
  ck_assert_double_eq_tol(result.matrix[0][2], 5.0, S21_EPSILON);

  ck_assert_double_eq_tol(result.matrix[1][0], 2.0, S21_EPSILON);
  ck_assert_double_eq_tol(result.matrix[1][1], 4.0, S21_EPSILON);
  ck_assert_double_eq_tol(result.matrix[1][2], 2.0, S21_EPSILON);



  s21_remove_matrix(&A);
  s21_remove_matrix(&result);

#test s21_transpose_3
  matrix_t A;
  matrix_t result;
  s21_create_matrix(3, 0, &A);

  ck_assert_int_eq(s21_transpose(&A, &result), 1);

  s21_remove_matrix(&A);
  s21_remove_matrix(&result);

#test s21_transpose_4
  matrix_t A;
  matrix_t result;
  s21_create_matrix(0, 3, &A);

  ck_assert_int_eq(s21_transpose(&A, &result), 1);

  s21_remove_matrix(&A);
  s21_remove_matrix(&result);


#test s21_transpose_5
  matrix_t A, B, C;
  s21_create_matrix(2, 3, &A);
  s21_create_matrix(3, 2, &C);

  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 4.0;
  A.matrix[1][1] = 5.0;
  A.matrix[1][2] = 6.0;

  ck_assert_int_eq(s21_transpose(&A, &B), 0);

  C.matrix[0][0] = 1.0;
  C.matrix[0][1] = 4.0;
  C.matrix[1][0] = 2.0;
  C.matrix[1][1] = 5.0;
  C.matrix[2][0] = 3.0;
  C.matrix[2][1] = 6.0;

  ck_assert_int_eq(s21_eq_matrix(&B, &C), SUCCESS);

  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);

#test s21_transpose_6
  matrix_t A, B, C;
  s21_create_matrix(3, 3, &A);
  s21_create_matrix(3, 3, &C);

  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 4.0;
  A.matrix[1][1] = 5.0;
  A.matrix[1][2] = 6.0;
  A.matrix[2][0] = 7.0;
  A.matrix[2][1] = 8.0;
  A.matrix[2][2] = 9.0;

  ck_assert_int_eq(s21_transpose(&A, &B), 0);

  C.matrix[0][0] = 1.0;
  C.matrix[0][1] = 4.0;
  C.matrix[0][2] = 7.0;
  C.matrix[1][0] = 2.0;
  C.matrix[1][1] = 5.0;
  C.matrix[1][2] = 8.0;
  C.matrix[2][0] = 3.0;
  C.matrix[2][1] = 6.0;
  C.matrix[2][2] = 9.0;

  ck_assert_int_eq(s21_eq_matrix(&B, &C), SUCCESS);

  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);

#test s21_transpose_7
  matrix_t A, B;
  s21_create_matrix(3, 0, &A);

  ck_assert_int_eq(s21_transpose(&A, &B), 1);

  s21_remove_matrix(&A);
  s21_remove_matrix(&B);

#test s21_transpose_8
  matrix_t A, B, C;
  s21_create_matrix(4, 4, &A);
  s21_create_matrix(4, 4, &C);

  A.matrix[0][0] = 1;
  A.matrix[0][1] = 2;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 4;
  A.matrix[1][0] = 0;
  A.matrix[1][1] = 4;
  A.matrix[1][2] = 2;
  A.matrix[1][3] = 1;
  A.matrix[2][0] = 5;
  A.matrix[2][1] = 2;
  A.matrix[2][2] = 1;
  A.matrix[2][3] = 3;
  A.matrix[3][0] = 3;
  A.matrix[3][1] = 7;
  A.matrix[3][2] = 2;
  A.matrix[3][3] = 4;

  ck_assert_int_eq(s21_transpose(&A, &B), 0);

  C.matrix[0][0] = 1;
  C.matrix[0][1] = 0;
  C.matrix[0][2] = 5;
  C.matrix[0][3] = 3;
  C.matrix[1][0] = 2;
  C.matrix[1][1] = 4;
  C.matrix[1][2] = 2;
  C.matrix[1][3] = 7;
  C.matrix[2][0] = 3;
  C.matrix[2][1] = 2;
  C.matrix[2][2] = 1;
  C.matrix[2][3] = 2;
  C.matrix[3][0] = 4;
  C.matrix[3][1] = 1;
  C.matrix[3][2] = 3;
  C.matrix[3][3] = 4;

  ck_assert_int_eq(s21_eq_matrix(&B, &C), SUCCESS);

  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);